===========
File Import
===========

include file("utils.arr")

provide:
  data Node,
end

--------

(source_file
  (import_stmt
    (import_source
      (import_special
        (name)
        (string
          (string_content)))))
  (provide_stmt
    (provide_block
      (provide_spec
        (provide_data_spec
          (data_name_spec
            (module_ref
              (name))))))))

========
Function
========

import file as F


fun foo(bar):
end

---

(source_file (import_stmt (import_source (import_name (name))) (name)) 
  (block (fun_expr (name) (fun_header (args (binding (name_binding (name))))))))


=====
Type
=====

type Foo<A, B, C> = (A -> Bar<A, B, C>)

---

(source_file
  (block
      (type_expr
        (name)
        (ty_params
          (comma_names
            (name)
            (name)
            (name)))
        (ann
          (arrow_ann
            (arrow_ann_args
              (comma_anns
                (ann
                  (name_ann
                    (name)))))
            (ann
              (app_ann
                (name_ann
                  (name))
                (comma_anns
                  (ann
                    (name_ann
                      (name)))
                  (ann
                    (name_ann
                      (name)))
                  (ann
                    (name_ann
                      (name)))))))))))

====
Data
====

data Foo:
| bar
| baz(arg)
end

---

(source_file
  (block
      (data_expr
        (name)
        (data_variant
          (name))
        (data_variant
          (variant_constructor
            (name)
            (variant_members
              (variant_member
                (binding
                  (name_binding
                    (name))))))))))

=====
Cases
=====
cases (List) deps:
| empty => none
| link(id, rst) => some 1
end


---

(source_file
  (block
    (cases_expr
      (ann
        (name_ann
          (name)))
      (id_expr
        (id_expr))
      (cases_branch
        (name)
        (block
          (id_expr
            (id_expr))))
      (cases_branch
        (name)
        (cases_args
          (cases_binding
            (binding
              (name_binding
                (name))))
          (cases_binding
            (binding
              (name_binding
                (name)))))
        (block
          (id_expr
            (id_expr))
          (prim_expr
            (num_expr
              (number))))))))

================
List Constructor
================
[list: 1, 2, 3, 4]

---

;; TODO: shouldn't have top level check_test

(source_file
  (block
    (construct_expr
      (id_expr
        (id_expr))
      (prim_expr
        (num_expr
          (number)))
      (prim_expr
        (num_expr
          (number)))
      (prim_expr
        (num_expr
          (number)))
      (prim_expr
        (num_expr
          (number))))))


=============
Block Comment
=============

5 #| comment |# + 5

---

(source_file
  (block
    (prim_expr
      (num_expr
        (number)))
    (block_comment)
    (binop)
    (prim_expr
      (num_expr
        (number)))))

=====
Table
=====

t = table: name, score
  row: "Alice", 85
  row: "Bob", 92
  row: "Charlie", 78
end

---

(source_file
  (block
    (let_expr
      (toplevel_binding
        (binding
          (name_binding
            (name))))
      (table_expr
        (table_headers
          (list_table_header
            (table_header
              (name)))
          (table_header
            (name)))
        (table_rows
          (table_row
            (table_items
              (list_table_item
                (prim_expr
                  (string_expr
                    (string
                      (string_content)))))
              (prim_expr
                (num_expr
                  (number)))))
          (table_row
            (table_items
              (list_table_item
                (prim_expr
                  (string_expr
                    (string
                      (string_content)))))
              (prim_expr
                (num_expr
                  (number)))))
          (table_row
            (table_items
              (list_table_item
                (prim_expr
                  (string_expr
                    (string
                      (string_content)))))
              (prim_expr
                (num_expr
                  (number))))))))))

============
Table Select
============

select name from t end

---

(source_file
  (block
    (table_select
      (name)
      (id_expr
        (id_expr)))))

===========
Table Sieve
===========

sieve t using score: 
  score >= 80 
end

---

(source_file
  (block
    (table_filter
      (id_expr
        (id_expr))
      (binding
        (name_binding
          (name)))
      (id_expr
        (id_expr))
      (binop)
      (prim_expr
        (num_expr
          (number))))))

===========
Table Order
===========

order t: 
  score descending
end

---

(source_file
  (block
    (table_order
      (id_expr
        (id_expr))
      (column_order
        (name)))))

===========
Table Extend
===========

extend t using score: 
  grade: if score >= 80: "B" else: "C" end 
end

---


(source_file
  (block
    (table_extend
      (id_expr
        (id_expr))
      (binding
        (name_binding
          (name)))
      (table_extend_fields
        (table_extend_field
          (key
            (name))
          (if_expr
            (id_expr
              (id_expr))
            (binop)
            (prim_expr
              (num_expr
                (number)))
            (block
              (prim_expr
                (string_expr
                  (string
                    (string_content)))))
            (block
              (prim_expr
                (string_expr
                  (string
                    (string_content)))))))))))

===============
Table Transform
===============

transform t using score: 
  score: score + 5 
end

---

(source_file
  (block
    (table_update
      (id_expr
        (id_expr))
      (binding
        (name_binding
          (name)))
      (obj_fields
        (obj_field
          (key
            (name))
          (id_expr
            (id_expr))
          (binop)
          (prim_expr
            (num_expr
              (number))))))))

=============
Table Extract
=============

extract name from t end

---

(source_file
  (block
    (table_extract
      (name)
      (id_expr
        (id_expr)))))

=============
Triple String
=============

```
foo
\123\x7F\u0ABC\\\n\r\t\"\'\` ` ``  
```

---

(source_file
  (block
    (prim_expr
      (string_expr
        (string
          (string_content)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (string_content))))))

=============
Double String
=============

"foo \123\x7F\u0ABC\\\n\r\t\"\'"

---

(source_file
  (block
    (prim_expr
      (string_expr
        (string
          (string_content)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence))))))

=============
Single String
=============

'foo \123\x7F\u0ABC\\\n\r\t\"\''

---

(source_file
  (block
    (prim_expr
      (string_expr
        (string
          (string_content)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence)
          (escape_sequence))))))
